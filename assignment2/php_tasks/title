#!/usr/bin/php
<?php

////////////////////////////////////////////////////////////////////////////////
//                                TASK B                                      //
////////////////////////////////////////////////////////////////////////////////
//
// The title script lists the movie title, year, content rating, IMDB score 
// and genres of those movies with the title matching the given substring 
// (case insensitive), one per line. The output of multiple genres of a movie 
// should be concatenated in one line delimited by a comma and sorted 
// alphabetically in ascending order, as shown by an example below. The rows 
// are ordered by year (ascending), then by IMDB rating (descending) and 
// finally by title (ascending). It has the following output format:
//

// include the common PHP code file
require("a2.php");

// PROGRAM BODY BEGINS

$usage = "Usage: $argv[0] Title";
$db = dbConnect(DB_CONNECTION);

// Check arguments
if (count($argv) < 2){ 
  exit("$usage\n");
}
$title = strtolower($argv[1]);
// use a query to filter out results to match movies that contain the substring
// of our arguements. i use ILIKE to be a case insensitive match, and place
// % on both sides so the substring can occur either side or in the middle of the
// overall string
$q = "SELECT * from movie_list WHERE movie_list.movie ILIKE '\%$title\%'
    ORDER BY movie_list.year ASC, movie_list.score DESC, movie_list.movie ASC;";
$r = dbQuery($db, mkSQL($q, $title));

// Iterate through the results and print formatted
$i = 1;
while ($t = dbNext($r)) {
  $comma_off = true;
  $first = true;
  if(empty($t[1]) && empty($t[2]) && empty($t[3])){
      echo "$i. $t[0]";
  }else{
      echo "$i. $t[0] (";
  }
  if (!empty($t[1])){
    format_echo($t[1], true, $comma_off);
  }
  if (!empty($t[2])){
    format_echo($t[2], false, $comma_off);
  }
  if(!empty($t[3])){
    format_echo($t[3], false, $comma_off);
  }
  echo ") ";
  if(!empty($t[4])){
    echo "[$t[4]]\n";
  }  
  $i++;
}

?>
